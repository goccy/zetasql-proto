//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Definition of ZetaSQL "known error" protocol buffer. Used to parse
// known error files into protocol buffers. By convention, these are named
// "<engine>_known_error.textproto".

syntax = "proto2";

package zetasql;

// Known error modes. By default the compliance framework skips all modes of
// queries with known error entries.
// Use --sql_e2e_test_all to run all but queries in modes CRASHES_DO_NOT_RUN.
// Modes are ordered by severity. If a label appears in multiple known error
// lists, the label's mode is the highest one.
enum KnownErrorMode {
  // Reserves zero value to enable natural conversion from mode to a boolean
  // where 0 = false means no error is known and non-zero values = true means
  // an error is known and expected. The zero value is not supposed to be used.
  NONE = 0;
  ALLOW_UNIMPLEMENTED = 10;
  ALLOW_ERROR = 20;
  ALLOW_ERROR_OR_WRONG_ANSWER = 30;
  CRASHES_DO_NOT_RUN = 100;
}

message KnownErrorEntry {
  optional KnownErrorMode mode = 3 [default = ALLOW_ERROR_OR_WRONG_ANSWER];

  // The reason for the error, e.g., a bug.
  optional string reason = 1;

  // A label can be one defined in *.test files, or a query referred by
  // <filename>:<query_name>. A label can also be a RE2 regex that matches
  // a group of labels.
  repeated string label = 2;
}

message KnownErrorFile {
  // Lists of contacts for maintaining this list.
  repeated string contact_email = 1;

  // A group of known error lists. It's recommended to define a `known_errors`
  // section for each unsupported functionality, bug, change list, etc.
  repeated KnownErrorEntry known_errors = 2;
}
