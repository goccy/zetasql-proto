//
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto2";

package zetasql.functions;

import "zetasql/proto/anon_output_with_report.proto";
import "zetasql/public/type.proto";

option java_package = "com.google.zetasql.functions";
option java_outer_classname = "ZetaSQLDifferentialPrivacy";

// Enum that defines the output format of differential privacy functions that
// return report. See:
//   Detailed report description: (broken link).
//   Updated report syntax:  (broken link).
message DifferentialPrivacyEnums {
  enum ReportFormat {
    option (opaque_enum_type_options).sql_opaque_enum_name =
        "DIFFERENTIAL_PRIVACY_REPORT_FORMAT";

    // Invalid in ZetaSQL.
    DIFFERENTIAL_PRIVACY_REPORT_FORMAT_INVALID = 0
        [(opaque_enum_value_options).invalid_enum_value = true];

    // Report output format is JSON.
    JSON = 1;

    // Report output format is proto.
    PROTO = 2;
  }
}

// Contains output from a ZetaSQL differential privacy function.
message DifferentialPrivacyOutputWithReport {
  oneof result {
    DifferentialPrivacyOutputValue value = 1;
    DifferentialPrivacyOutputValues values = 2;
  }

  optional DifferentialPrivacyBoundingReport bounding_report = 3;
}

// When ApproxBounds is called by bounded algorithms, the BoundingReport can
// be used to pass differentially private intermediate results to help users
// understand the accuracy implications of the output.
message DifferentialPrivacyBoundingReport {
  // Lower and upper bounds are either the explicit bounds specified in the
  // query, or are the (noisy) implicit bounds that were derived by the
  // ApproxBounds algorithm.
  optional DifferentialPrivacyOutputValue lower_bound = 1;
  optional DifferentialPrivacyOutputValue upper_bound = 2;
  // `num_inputs` and `num_outside` in the BoundingReport are *noisy*
  // counts, not exact.
  // Noisy number of total inputs to the bounding algorithm.
  optional double num_inputs = 3;
  // Noisy number of inputs lying outside the bounds.
  optional double num_outside = 4;
}

message DifferentialPrivacyOutputValues {
  repeated DifferentialPrivacyOutputValue values = 1;
}

message DifferentialPrivacyOutputValue {
  oneof value {
    int64 int_value = 1;
    double float_value = 2;
    string string_value = 3;
  }

  optional NoiseConfidenceInterval noise_confidence_interval = 4;
}
